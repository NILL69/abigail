"""
Main module
"""
import traceback
import os
import re
import datetime
from bot import ARGS, FUNC, HELP, KB, MESSAGE, PARSER, gen_menu, empty_menu
import bot
import database
import log

# Logger initialization
logger = log.Logger(["MAINBOT", log.FYELLOW])

# message configs
CALENDAR_BTN = "–ö–∞–ª–µ–Ω–¥–∞—Ä—åüìÜ"
NOTICES_BTN = "–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–πüìÉ"
ADD_EVENT_BTN = "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ‚úèÔ∏è"
ADD_NOTICE_BTN = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ‚è∞"
HELP_BTN = "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫‚öô"

GREETING_MESSAGE = """–ü—Ä–∏–≤–µ—Ç, —á–µ–ª–æ–≤–µ–∫üëã

–ß–µ—Ä–µ–∑ –º–µ–Ω—è —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ—É:
üìù–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
üïò–û–±—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—à–∫–æ–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã, —Å–±–æ—Ä –º–∞–∫—É–ª–∞—Ç—É—Ä—ã –∏ —Ç.–¥.)
üìÜ–°–æ–±—ã—Ç–∏—è –≤ –∫–ª–∞—Å—Å–µ (–¥–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö, —ç–∫—Å–∫—É—Ä—Å–∏–π –∏ —Ç.–ø)

–í—Å—ë –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç

üëá–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ö–∞–ª–µ–Ω–¥–∞—Ä—å\" –∏ —É–≤–∏–¥–∏—à—å, —á—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ"
"""

ID_OF_THE_TEACHER = 526809653  # id of the teacher


# Start command
def _cmd_start(_tb, message, _args):
    chatid = message.chat.id
    # adding user to the database
    database.add_user(
        chatid, chatid == ID_OF_THE_TEACHER
    )  # all_user_id.add(message.chat.id)
    all_user_id = database.get_user_list()
    logger.info(f"All user id: {all_user_id}")
    return bot.MessageText(GREETING_MESSAGE), None


CMD_START = {HELP: "–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–±—è –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", ARGS: {}, FUNC: _cmd_start}


# Help command
def _cmd_help(tb, message, _args):
    docstring = tb.docstring(message.chat.id)
    return bot.MessageText(f"–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è? ‚öô\n{docstring}"), None


CMD_HELP = {HELP: "–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É", ARGS: {}, FUNC: _cmd_help}


# Calendar command
def _cmd_calendar(_tb, _message, _args):
    now = datetime.datetime.now().timestamp()
    event_list = database.get_events_since(now - 60 * 60 * 24)

    if len(event_list) == 0:
        return (
            bot.MessageText("–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ. –ú–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å üôÉ"),
            None,
        )

    events_map = {}
    for event in event_list:
        if events_map.get(event["timestamp"]) is None:
            events_map[event["timestamp"]] = []
        events_map[event["timestamp"]].append(event["text"])

    res_message = ""
    times_list = list(events_map.keys())
    times_list.sort()

    for time in times_list:
        local_message = "".join(
            [f"{order}) {event}\n" for (order, event) in enumerate(events_map[time], 1)]
        )
        datestring = datetime.datetime.fromtimestamp(time).strftime("%d.%m (%a)")
        res_message += f"üìå {datestring}:\n{local_message}"

    return bot.MessageText(res_message), None


CMD_CALENDAR = {
    HELP: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫ –Ω–∏–º —Å–æ–±—ã—Ç–∏–π",
    ARGS: {},
    FUNC: _cmd_calendar,
}


# Add event command
def _cmd_add_event(tb, _message, args):
    date, _ = args["date"]
    text, _ = args["text"]
    database.add_event(text, date.timestamp())
    tb.send_all(
        database.get_user_list(), bot.MessageText(f'{date.strftime("%d.%m")} - {text}')
    )
    return bot.MessageText("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ–±–Ω–æ–≤–ª—ë–Ω"), None


def _parse_date(message):
    try:
        text = message.text
        day, month, year = re.findall("^(.*)\\.(.*)\\.(.*)$", text)[0]

        date = datetime.datetime(int(year), int(month), int(day))

        if date < datetime.datetime.now() - datetime.timedelta(days=1):
            return None, "–î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è"

        return datetime.datetime(int(year), int(month), int(day)), None

    except Exception as err:
        logger.warn(f"Handled: {err}")
        return None, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥"


def gen_date_menu(size):
    """
    Generates menu for dates
    """
    now = datetime.datetime.now()
    dayspan = datetime.timedelta(days=1)
    return gen_menu([(now + dayspan * n).strftime("%d.%m.%Y") for n in range(size)])


CMD_ADD_EVENT = {
    HELP: "–ü–æ–∑–≤–æ–ª—è–µ—Ç –í–∞–º –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É.",
    ARGS: {
        "date": {KB: gen_date_menu(16), MESSAGE: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", PARSER: _parse_date,},
        "text": {
            KB: empty_menu(),
            MESSAGE: "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
            PARSER: lambda message: (message.text, None),
        },
    },
    FUNC: _cmd_add_event,
}


# Send all command
def _cmd_send_all(tb, _message, args):
    message, _ = args["message"]
    tb.send_all(database.get_user_list(), bot.MessageCopy(message))
    return bot.MessageText("–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ"), None


CMD_SEND_ALL = {
    HELP: "–†–∞—Å—Å—ã–ª–∞–µ—Ç –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ",
    ARGS: {
        "message": {
            KB: empty_menu(),
            MESSAGE: "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª—ã)",
            PARSER: lambda message: (message, None),
        }
    },
    FUNC: _cmd_send_all,
}

KEY_START = "/start"
KEY_HELP = "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ ‚öô"
KEY_CALENDAR = "–ö–∞–ª–µ–Ω–¥–∞—Ä—å üóì"
KEY_ADD_EVENT = "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ üóì"
KEY_SEND_ALL = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º üí¨"


def _interface(_tb, chatid):
    if database.is_teacher(chatid):
        return {
            KEY_START: CMD_START,
            KEY_HELP: CMD_HELP,
            KEY_CALENDAR: CMD_CALENDAR,
            KEY_ADD_EVENT: CMD_ADD_EVENT,
            KEY_SEND_ALL: CMD_SEND_ALL,
        }
    else:
        return {
            KEY_START: CMD_START,
            KEY_HELP: CMD_HELP,
            KEY_CALENDAR: CMD_CALENDAR,
        }


def _main():
    # Database initialization
    database.init_db()

    logger.info("Initializing the bot")
    token = os.getenv("TELEGRAM_TOKEN")
    tb = bot.Bot(token, _interface)

    logger.info("Start polling")
    tb.start()


if __name__ == "__main__":
    _main()
