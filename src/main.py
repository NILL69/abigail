"""Main module with def main()"""
import os
import re
import datetime
from bot import ARGS, FUNC, KB, MESSAGE, PARSER, HIDDEN, Keyboard
import bot
import database
from database import TIMESTAMP, TEXT, SUBJECT
import log

# Logger initialization
logger = log.Logger(["MAINBOT", log.FYELLOW])

# message configs
GREETING_MESSAGE = """–ü—Ä–∏–≤–µ—Çüëã

–ß–µ—Ä–µ–∑ –º–µ–Ω—è –≤—ã –±—É–¥–µ—Çe –ø–æ–ª—É—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
üìù–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
üïò–û–±—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—à–∫–æ–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã, —Å–±–æ—Ä –º–∞–∫—É–ª–∞—Ç—É—Ä—ã –∏ —Ç.–¥.)
üìÜ–°–æ–±—ã—Ç–∏—è –≤ –∫–ª–∞—Å—Å–µ (–¥–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö, —ç–∫—Å–∫—É—Ä—Å–∏–π –∏ —Ç.–ø)

–í—Å—ë –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç

üëá–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ö–∞–ª–µ–Ω–¥–∞—Ä—å\", —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ"
"""

LESSONS_SCHEDULE = """
–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:
1) –•–∏–º–∏—è 
2) –ê–ª–≥–µ–±—Ä–∞
3) –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ (—É —Å–≤–æ–∏—Ö —É—á–∏—Ç–µ–ª–µ–π)
4) –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞
5) –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ
6) –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ 

–í—Ç–æ—Ä–Ω–∏–∫:
1) –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ 
    (—É –≥—Ä—É–ø–ø—ã –ë—Ä–∞–Ω–∏–Ω–æ–≤–æ–π - –õ—É–∫–∏–Ω–∞,
    —É –≥—Ä—É–ø–ø—ã –õ—É–∫–∏–Ω–æ–π - –†—É–¥—å, 
    —É –≥—Ä—É–ø–ø—ã –†—É–¥—å - –ë—Ä–∞–Ω–∏–Ω–æ–≤–∞)
2) –ì–µ–æ–º–µ—Ç—Ä–∏—è
3) –†—É—Å—Å–∫–∏–π
4) –≠–ª–µ–∫—Ç–∏–≤ –ø–æ —Ä—É—Å—Å–∫–æ–º—É/–º–∞—Ç–µ–º–∞—Ç–∏–∫–µ 
5) –ò—Å—Ç–æ—Ä–∏—è
6) –û–ë–ñ

–°—Ä–µ–¥–∞:
1) –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
    (—É –≥—Ä—É–ø–ø—ã –ë—Ä–∞–Ω–∏–Ω–æ–≤–æ–π - –†—É–¥—å,
    —É –≥—Ä—É–ø–ø—ã –†—É–¥—å - –õ—É–∫–∏–Ω–∞,
    —É –≥—Ä—É–ø–ø—ã –õ—É–∫–∏–Ω–æ–π - –ë—Ä–∞–Ω–∏–Ω–æ–≤–∞)
2) –≠–ª–µ–∫—Ç–∏–≤ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ/—Ä—É—Å—Å–∫–æ–º—É
3) –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ 
4) –§–∏–∑–∏–∫–∞
5) –ò—Å—Ç–æ—Ä–∏—è
6) –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞

–ß–µ—Ç–≤–µ—Ä–≥:
1) –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è
2) –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ (—É —Å–≤–æ–∏—Ö —É—á–∏—Ç–µ–ª–µ–π)
3) –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
    (—É –≥—Ä—É–ø–ø—ã –†—É–¥—å - –ë—Ä–∞–Ω–∏–Ω–æ–≤–∞,
    —É –≥—Ä—É–ø–ø—ã –ë—Ä–∞–Ω–∏–Ω–æ–≤–æ–π - –õ—É–∫–∏–Ω–∞,
    —É –≥—Ä—É–ø–ø—ã –õ—É–∫–∏–Ω—ã - –†—É–¥—å)
4) –†—É—Å—Å–∫–∏–π
5) –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞
6) –ì–µ–æ–≥—Ä–∞—Ñ–∏—è

–ü—è—Ç–Ω–∏—Ü–∞:
1) –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ (—É –≥—Ä—É–ø–ø—ã –ë—Ä–∞–Ω–∏–Ω–æ–≤–æ–π - –†—É–¥—å,
    —É –≥—Ä—É–ø–ø—ã –†—É–¥—å - –õ—É–∫–∏–Ω–∞,
    —É –≥—Ä—É–ø–ø—ã –õ—É–∫–∏–Ω–æ–π - –ë—Ä–∞–Ω–∏–Ω–æ–≤–∞)
2) –ë–∏–æ–ª–æ–≥–∏—è
3) –ò—Å—Ç–æ—Ä–∏—è
4) –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ 
5) –ê–ª–≥–µ–±—Ä–∞
6) –ì–µ–æ–º–µ—Ç—Ä–∏—è 

–°—É–±–±–æ—Ç–∞:
1) –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞
2) –§–∏–∑–∏–∫–∞
3) –≠–ª–µ–∫—Ç–∏–≤ –ø–æ –±–∏–æ–ª–æ–≥–∏–∏/–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é
4) –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞
5) –ê–ª–≥–µ–±—Ä–∞
6) –≠–ª–µ–∫—Ç–∏–≤ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏/–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ
"""

FOOD_CANTEEN_SCHEDULE = """
1 –Ω–µ–¥–µ–ª—è
üçë–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: –±–æ—Ä—â –±–µ–∑ —Ñ–∞—Å–æ–ª–∏, –ø–ª–æ–≤, –∫–∞–ø—É—Å—Ç–∞, —è–±–ª–æ–∫–æ
üçë–í—Ç–æ—Ä–Ω–∏–∫: –≥–æ—Ä–æ—Ö–æ–≤—ã–π —Å—É–ø, –ø—é—Ä–µ –≤–∫—É—Å–Ω–æ–µ —Å —Ä—ã–±–Ω–æ–π –∫–æ—Ç–ª–µ—Ç–æ–π, –º–æ—Ä–∫–æ–≤—å, –π–æ–≥—É—Ä—Ç
üçë–°—Ä–µ–¥–∞: –æ–≤–æ—â–Ω–æ–π —Å—É–ø —Å–æ —Å–≤–µ–∂–µ–π –∫–∞–ø—É—Å—Ç–æ–π, –∫—É—Ä–∏–Ω–∞—è –∫–æ—Ç–ª–µ—Ç–∞ —Å –º–∞—Å–ª–µ–Ω–Ω—ã–º–∏ –º–∞–∫–∞—Ä–æ–Ω–∞–º–∏, –≤–∏–Ω–µ–≥—Ä–µ—Ç, —è–±–ª–æ–∫–æ, –æ—Ä–∞–Ω–∂–µ–≤—ã–π —Å–æ–∫
üçë–ß–µ—Ç–≤–µ—Ä–≥: —Ä–∞—Å—Å–æ–ª—å–Ω–∏–∫, –ª–µ–Ω–∏–≤—ã–µ –≥–æ–ª—É–±—Ü—ã, –ø–æ–º–∏–¥–æ—Ä—ã —Å –ª—É–∫–æ–º, –∞–ø–µ–ª—å—Å–∏–Ω, –∫–æ–º–ø–æ—Ç
üçë–ü—è—Ç–Ω–∏—Ü–∞: —Å—É–ø —Å –ª–∞–ø—à–æ–π, –∫—É—Ä–∏—Ü–µ–π –∏ –∫–∞—Ä—Ç–æ—à–∫–æ–π, —Ä—ã–±–∞ –≥–∞–¥–∫–∞—è —Å –∫–∞—Ä—Ç–æ—à–∫–æ–π, –æ–≥—É—Ä—Ü—ã –º–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–µ —Å –ª—É–∫–æ–º, –π–æ–≥—É—Ä—Ç, –º–æ—Ä—Å
üçë–°—É–±–±–æ—Ç–∞: —â–∏ —Å –ø–µ—Ä–ª–æ–≤–∫–æ–π, –≥—Ä–µ—á–∫–∞ —Å –ø–µ—á–µ–Ω–∫–æ–π, —Å–≤–µ–∫–ª–∞, —è–±–ª–æ–∫–æ, —Å–æ–∫
2 –Ω–µ–¥–µ–ª—è
üçë–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: –æ–≤–æ—â–Ω–æ–π —Å—É–ø —Å–æ —Å–≤–µ–∂–µ–π –∫–∞–ø—É—Å—Ç–æ–π, —Ä–∏—Å —Å –∫—É—Ä–∏–Ω–æ–π –∫–æ—Ç–ª–µ—Ç–æ–π –≤ —Å—ã—Ä–µ, –æ–ª–∏–≤—å–µ –±–µ–∑ —Å–æ—É—Å–∞ —à–∫–æ–ª—å–Ω—ã–π, —Å–æ–∫ —è–±–ª–æ—á–Ω—ã–π, —è–±–ª–æ–∫–æ
üçë–í—Ç–æ—Ä–Ω–∏–∫: —Ä—ã–±–Ω—ã–π —Å—É–ø, —Ä–∞–≥—É, —Å–∞–ª–∞—Ç –∏–∑ –∫–∞–ø—É—Å—Ç—ã —è–±–ª–æ–∫–∞ –∏ –º–æ—Ä–∫–æ–≤–∫–∏, –π–æ–≥—É—Ä—Ç
üçë–°—Ä–µ–¥–∞: –±–æ—Ä—â —Å —Ñ–∞—Å–æ–ª—å—é, –≥—Ä–µ—á–∫–∞ —Å –∫–æ—Ç–ª–µ—Ç–æ–π –≤–∫—É—Å–Ω–æ–π, –±—É–ª–∫–∞ —Å —Ç–≤–æ—Ä–æ–≥–æ–º, –ø–æ–ª–ø–æ–º–∏–¥–æ—Ä–∞
üçë–ß–µ—Ç–≤–µ—Ä–≥: —Ä–∞—Å—Å–æ–ª—å–Ω–∏–∫, —Ä—ã–±–∞ –≤ —è–π—Ü–µ —Å –ø—é—Ä–µ, —Å–≤–µ–∫–ª–∞, –π–æ–≥—É—Ä—Ç
üçë–ü—è—Ç–Ω–∏—Ü–∞: –ø–æ—Ö–ª–µ–±–∫–∞ –∫—Ä–µ—Å—Ç—å—è–Ω—Å–∫–∞—è, –∫—É—Ä–∏—Ü–∞ –≤ —Å–ø–µ—Ä–º–µ, –º–æ—Ä–∫–æ–≤–∫–∞, —è–±–ª–æ–∫–æ
üçë–°—É–±–±–æ—Ç–∞: —Å—É–ø —Å –∫–∞—Ä—Ç–æ—à–∫–æ–π, —Ç—É—à–µ–Ω—ã–µ –æ–≤–æ—â–∏ —Å –∫—É—Ä–∏–Ω–æ–π –∫–æ—Ç–ª–µ—Ç–æ–π, –º–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–π –æ–≥—É—Ä–µ—Ü, —è–±–ª–æ—á–Ω—ã–π —Å–æ–∫, —è–±–ª–æ–∫–æ
""" 

subjects = {
        "–†—É—Å—Å–∫–∏–π", 
        "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", 
        "–ê–ª–≥–µ–±—Ä–∞", 
        "–ì–µ–æ–º–µ—Ç—Ä–∏—è", 
        "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", 
        "–ë–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (–ú–∞—Ä–∏–Ω–∞ –ì–∞—Ä—Ä–∏–µ–≤–Ω–∞)",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (–ü–æ–ø–æ–≤–∞)",
        "–ò—Å—Ç–æ—Ä–∏—è",
        "–≠–ª–µ–∫—Ç–∏–≤ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏",
        "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
        "–ë–∏–æ–ª–æ–≥–∏—è",
        "–≠–ª–µ–∫—Ç–∏–≤ –ø–æ –±–∏–æ–ª–æ–≥–∏–∏",
        "–•–∏–º–∏—è",
        "–§–∏–∑–∏–∫–∞",
        "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è",
        "–û–ë–ñ",
        "–ê–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ (–ë—Ä–∞–Ω–∏–Ω–æ–≤–∞)",
        "–ê–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ (–õ—É–∫–∏–Ω–∞)",
        "–ê–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ (–†—É–¥—å)",
        "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
        "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞",
}

HELP = "help"
CMD = "cmd"


# Start command
def _cmd_start(_tb, message, _args):
    chatid = message.chat.id
    # adding user to the database
    database.add_user(chatid, False)
    return GREETING_MESSAGE, None


CMD_START = {
    CMD: "/start",
    HIDDEN: True,
    ARGS: {},
    FUNC: _cmd_start,
}


# Help command
def _cmd_help(tb, message, _args):
    interf = _interface(tb, message.chat.id)
    docstring = ""
    for key, value in interf.items():
        if value.get(HELP):
            docstring += f"{key} - {value[HELP]}\n"
    return f"–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è? ‚öô\n{docstring}", None


CMD_HELP = {CMD: "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ ‚öô", HELP: "–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É", ARGS: {}, FUNC: _cmd_help}

# Schedule lesson command
def _cmd_lessons_schedule():
    return (
        LESSONS_SCHEDULE,
        None   
    )

# Schedule food_canteen command
def _cmd_foodCanteen_schedule():
    return (
        FOOD_CANTEEN_SCHEDULE,
        None
    )
        

# Calendar command
def _cmd_calendar(_tb, _message, _args):
    now = datetime.datetime.now().timestamp()
    event_list = database.get_events_since(now - 60 * 60 * 24)

    if len(event_list) == 0:
        return (
            "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ. –ú–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å üôÉ",
            None,
        )

    events_map = {}
    for event in event_list:
        if events_map.get(event[TIMESTAMP]) is None:
            events_map[event[TIMESTAMP]] = []
        events_map[event[TIMESTAMP]].append(event[TEXT])

    res_message = ""
    times_list = list(events_map.keys())
    times_list.sort()

    for time in times_list:
        local_message = "".join(
            [
                f"<code>üëâ</code> {event}\n"
                for (order, event) in enumerate(events_map[time], 1)
            ]
        )
        datestring = datetime.datetime.fromtimestamp(time).strftime("%d.%m (%a)")
        res_message += f"<code><b>üìå {datestring}</b></code>\n{local_message}\n"

    return res_message, None


CMD_CALENDAR = {
    CMD: "–ö–∞–ª–µ–Ω–¥–∞—Ä—å üóì",
    HELP: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫ –Ω–∏–º —Å–æ–±—ã—Ç–∏–π",
    ARGS: {},
    FUNC: _cmd_calendar,
}


# Add event command
def _cmd_add_event(tb, _message, args):
    date, _ = args["date"]
    text, _ = args["text"]
    database.add_event(text, date.timestamp())
    tb.send_all(database.get_user_list(), f'üóì {date.strftime("%d.%m")} - {text}')
    return "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ–±–Ω–æ–≤–ª—ë–Ω üóì", None


def _parse_date(message):
    try:
        text = message.text
        day, month, year = re.findall("^(.*)\\.(.*)\\.(.*)$", text)[0]

        date = datetime.datetime(int(year), int(month), int(day))

        if date < datetime.datetime.now() - datetime.timedelta(days=1):
            return None, "–î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è"

        return datetime.datetime(int(year), int(month), int(day)), None

    except Exception as err:
        logger.warn(f"Handled: {err}")
        return None, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥"


def gen_date_menu(cols, rows):
    """Generates menu for date"""
    now = datetime.datetime.now()
    dayspan = datetime.timedelta(days=1)
    return Keyboard(
        [
            [(now + dayspan * (cols * i + j)).strftime("%d.%m.%Y") for j in range(cols)]
            for i in range(rows)
        ]
    )


def _parse_text(message):
    if message.text is None:
        return (None, "–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    return (message.text, None)


def _gen_cmd_add_event():
    return {
        CMD: "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ üóì",
        HELP: "–ü–æ–∑–≤–æ–ª—è–µ—Ç –í–∞–º –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É.",
        ARGS: {
            "date": {
                KB: gen_date_menu(2, 8),
                MESSAGE: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
                PARSER: _parse_date,
            },
            "text": {
                KB: Keyboard(),
                MESSAGE: "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
                PARSER: _parse_text,
            },
        },
        FUNC: _cmd_add_event,
    }


def _cmd_add_homework(_tb, _message, args):
    subject, _ = args["subject"]
    date, _ = args["date"]
    text, _ = args["text"]
    database.add_hw(subject, date.timestamp(), text)
    # tb.send_all(
    #     database.get_user_list(), f'{date.strftime("%d.%m")} - {subject}: {text}'
    # )
    return "–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ üìö", None

def gen_homework_menu():
    """Generates menu for homework"""
    return Keyboard(
        [
            for i in subjects
        ]
    )

def _gen_cmd_add_homework():
    return {
        CMD: "–î–æ–±–∞–≤–∏—Ç—å –¥–∑ üìö",
        HELP: "–î–æ–±–∞–≤–ª—è–µ—Ç –¥–∑",
        ARGS: {
            "date": {
                KB: gen_date_menu(2, 8),
                MESSAGE: "–ö –∫–∞–∫–æ–º—É —Å—Ä–æ–∫—É –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å —ç—Ç–æ –¥–∑?",
                PARSER: _parse_date,
            },
            "subject": {
                KB: gen_homework_menu(),
                MESSAGE: "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–∑",
                PARSER: _parse_text,
            },
            "text": {
                KB: Keyboard(),
                MESSAGE: "–ö–∞–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–∑?",
                PARSER: _parse_text,
            },
        },
        FUNC: _cmd_add_homework,
    }


# Homework command
def _cmd_homework(_tb, _message, _args):
    now = datetime.datetime.now().timestamp()
    hw_list = database.get_hw_since(now - 60 * 60 * 24 * 7)

    # logger.info(hw_list)

    if len(hw_list) == 0:
        return ("–ü–æ–∫–∞ –¥–æ–º–∞—à–Ω–∏–π –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç", None)

    hw_map = {}
    for hw in hw_list:
        if hw_map.get(hw[TIMESTAMP]) is None:
            hw_map[hw[TIMESTAMP]] = []
        hw_map[hw[TIMESTAMP]].append(hw)

    res_message = ""
    times_list = list(hw_map.keys())
    times_list.sort()

    for time in times_list:
        hws = hw_map[time]
        hws.sort(key=lambda hw: hw[SUBJECT])

        local_message = "\n".join([format_hw(hw) for hw in hws])
        datestring = datetime.datetime.fromtimestamp(time).strftime("%d.%m (%a)")
        res_message += f"<code><b>üìå {datestring}</b></code>\n{local_message}\n\n"

    return res_message, None


def format_hw(hw):
    """Formats homework statement"""
    text = hw[TEXT]
    subject = hw[SUBJECT]

    if len(text.splitlines()) > 1:
        text = "".join(["\n" + line for line in text.splitlines()])

    return f"<code>üìö {subject}</code>: {text}"


CMD_HOMEWORK = {
    CMD: "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ üìö",
    HELP: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ",
    ARGS: {},
    FUNC: _cmd_homework,
}


def _build_interface(cmds):
    return {item[CMD]: item for item in cmds}


def _interface(_tb, chatid):
    if database.is_teacher(chatid):
        return _build_interface(
            [
                CMD_CALENDAR,
                _gen_cmd_add_event(),
                CMD_HOMEWORK,
                _gen_cmd_add_homework(),
                _cmd_lessons_schedule,
                _cmd_foodCanteen_schedule,
                CMD_HELP,
                CMD_START,
            ]
        )
    else:
        return _build_interface(
            [
                CMD_CALENDAR, 
                CMD_HOMEWORK, 
                _cmd_lessons_schedule, 
                _cmd_foodCanteen_schedule, 
                CMD_START, 
                CMD_HELP,
            ]
        )


def _main():
    # Database initialization
    database.init_db()

    logger.info("Initializing the bot")
    token = os.getenv("TELEGRAM_TOKEN")
    tb = bot.Bot(token, _interface)

    logger.info("Start polling")
    tb.start()


if __name__ == "__main__":
    _main()
