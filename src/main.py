import time
import datetime
from threading import Thread
import os
import telebot
from telebot import types
import database
import log

# global values
DATEFORMAT = "%d.%m (%a)"
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")


ID_OF_THE_TEACHER = 526809653  # id of the teacher
IDS_OF_DEVELOPERS = [936467751, 526809653]


# message configs
CALENDAR_BTN = "–ö–∞–ª–µ–Ω–¥–∞—Ä—åüìÜ"
NOTICES_BTN = "–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–πüìÉ"
ADD_EVENT_BTN = "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ‚úèÔ∏è"
ADD_NOTICE_BTN = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ‚è∞"
HELP_BTN = "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫‚öô"
HOMEWORK_BTN = "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µüìñ"
UPDATE_BTN = "–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞‚ö†Ô∏è"
ADD_UPDATE_BTN = "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"

GREETING_MESSAGE = """–ü—Ä–∏–≤–µ—Ç, —á–µ–ª–æ–≤–µ–∫üëã

–ß–µ—Ä–µ–∑ –º–µ–Ω—è —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ—É:
üìù–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
üïò–û–±—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—à–∫–æ–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã, —Å–±–æ—Ä –º–∞–∫—É–ª–∞—Ç—É—Ä—ã –∏ —Ç.–¥.)
üìÜ–°–æ–±—ã—Ç–∏—è –≤ –∫–ª–∞—Å—Å–µ (–¥–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö, —ç–∫—Å–∫—É—Ä—Å–∏–π –∏ —Ç.–ø)

–í—Å—ë –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç

üëá–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ö–∞–ª–µ–Ω–¥–∞—Ä—å\" –∏ —É–≤–∏–¥–∏—à—å, —á—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ"
"""

HELP_MESSAGE = """–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è? ‚öôÔ∏è

1)–ö–∞–ª–µ–Ω–¥–∞—Ä—å üóìÔ∏è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫ –Ω–∏–º —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏

2)–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–πüìÉ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –í–∞–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –∞ —Ç–∞–∫ –∂–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã

3)–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ‚úèÔ∏è - –ø–æ–∑–≤–æ–ª—è–µ—Ç –í–∞–º –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –≤–∞–º –≤—ã—Å–≤–µ—Ç–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö 15-—Ç–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–Ω–µ–π, –Ω–∞—á–∏–Ω–∞—è —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –¥–∞—Ç, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–¥.–º–º.–≥–≥. –ü–æ—Å–ª–µ –≤–∞–º –≤—ã—Å–≤–µ—Ç–∏—Ç—Å—è: "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ". –í–≤–µ–¥–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –≤ –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø—Ä–∞–≤–∞. –ì–æ—Ç–æ–≤–æ, –í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ

4)–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ‚è∞ -

5)–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫‚öôÔ∏è - –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º, –∫–∞–∫ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç"""

database.init_db()

log.info(log.BOT, "initializing the bot")
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode=None)  # bot's Token


def notice_update_loop():
    while True:
        notices = database.get_unmarked_notices()
        all_user_id = database.get_user_list()
        count = 0
        for notice in notices:
            send_all(all_user_id, notice["text"])

        time.sleep(10)


def send_all(ids, text):
    """
    Send a message to all the users
    """
    count = 0
    while True:
        try:
            for i in range(count, len(ids)):
                count += 1
                bot.send_message(ids[i], text)
                time.sleep(0.5)
            else:
                break
        except Exception as e:
            log.error(log.BOT, f"Error 403. {ids[i]} blocked me :(\n{str(e)}\n")


@bot.message_handler(commands=["start"])
def start(message):
    """
    adds new user to the database and greets them
    """
    global message_start
    message_start = message
    log.bot_message(message)
    # adding user to the database
    database.add_user(
        message.chat.id, message.chat.id == ID_OF_THE_TEACHER
    )  # all_user_id.add(message.chat.id)
    all_user_id = database.get_user_list()
    log.info(log.BOT, f"All user id: {all_user_id}")
    startmenu = types.ReplyKeyboardMarkup(True, False)
    if not database.is_teacher(message.chat.id):
        startmenu.row(CALENDAR_BTN, HOMEWORK_BTN)
    else:
        startmenu.row(CALENDAR_BTN, HOMEWORK_BTN)
        startmenu.row(ADD_EVENT_BTN)
        startmenu.row(HELP_BTN)
        
    for i in IDS_OF_DEVELOPERS:
        if i == message.chat.id:
            startmenu.row(ADD_UPDATE)
    bot.send_message(
        message.chat.id, GREETING_MESSAGE, reply_markup=startmenu,
    )

def start2(message):
    """
    adds new user to the database and greets them
    """
    log.bot_message(message)
    # adding user to the database
    database.add_user(
        message.chat.id, message.chat.id == ID_OF_THE_TEACHER
    )  # all_user_id.add(message.chat.id)
    all_user_id = database.get_user_list()
    log.info(log.BOT, f"All user id: {all_user_id}")
    startmenu = types.ReplyKeyboardMarkup(True, False)
    if not database.is_teacher(message.chat.id):
        startmenu.row(CALENDAR_BTN, HOMEWORK_BTN)
    else:
        startmenu.row(CALENDAR_BTN, HOMEWORK_BTN)
        startmenu.row(ADD_EVENT_BTN)
        startmenu.row(HELP_BTN)
        
    for i in IDS_OF_DEVELOPERS:
        if i == message.chat.id:
            startmenu.row(ADD_UPDATE)
    bot.send_message(
        message.chat.id, '–ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=startmenu,
    )


def cmd_list_events(message):
    """
    Calendar view implementation
    """

    now = datetime.datetime.now().timestamp()
    event_list = database.get_events_since(now)

    # sending everyone message, that contains all events.
    # If there are no event_list, it'll send pre-prepared message.
    if len(event_list) == 0:
        bot.send_message(
            message.chat.id, "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ. –ú–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å üôÉ"
        )
    else:
        events_map = {}
        for event in event_list:
            if events_map.get(event["timestamp"]) is None:
                events_map[event["timestamp"]] = []
            events_map[event["timestamp"]].append(event["text"])

        res_message = ""
        tss = list(events_map.keys())
        tss.sort()
        for ts in tss:
            one_message = ""
            for i in range(len(events_map[ts])):
                one_message += f"{i+1}) {events_map[ts][i]}\n"
            datestring = datetime.datetime.fromtimestamp(ts).strftime(DATEFORMAT)
            res_message += f"üí†{datestring}:\n{one_message}"

        bot.send_message(message.chat.id, res_message)


def cmd_list_notices(message):
    """
    Notices list implementation
    """

    nowts = datetime.datetime.now().timestamp()
    notice_list = database.get_notices_since(nowts)

    if len(notice_list) == 0:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç")
    else:
        notices_map = {}
        for notice in notice_list:
            if notices_map.get(notice["timestamp"]) is None:
                notices_map[notice["timestamp"]] = []
            notices_map[notice["timestamp"]].append(notice["text"])

        res_message = ""
        tss = list(notices_map.keys())
        tss.sort()
        for ts in tss:
            one_message = ""
            for i in range(len(notices_map[ts])):
                one_message += f"{i+1}) {notices_map[ts][i]}\n"
            datestring = datetime.datetime.fromtimestamp(ts).strftime("%d.%m.%Y %H:%M")
            res_message += f"üìç{datestring}:\n{one_message}"

        bot.send_message(message.chat.id, res_message)


def cmd_add_notice(message):
    """
    Implementation of adding notices
    """
    send = bot.send_message(
        message.chat.id,
        "–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    bot.register_next_step_handler(send, reminder_1)


def cmd_add_event(message):
    """
    Implementation of adding events
    """
    ts = datetime.datetime.now()
    keyboard = types.ReplyKeyboardMarkup(True, False)
    for _ in range(15):
        keyboard.row(ts.strftime("%d.%m.%Y"))
        ts += datetime.timedelta(days=1)

    send = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=keyboard)
    bot.register_next_step_handler(send, changing_our_calendar1)


def cmd_help(message):
    """
    Help for the teacher
    """
    bot.send_message(message.chat.id, HELP_MESSAGE)
    
    
def cmd_add_update(message):
    users_who_has_to_update = database.get_user_list()
    keyboard = types.ReplyKeyboardMarkup(True, False)
    for id in users_who_has_to_update:
        keyboard.row(UPDATE_BTN)
        bot.send_message(id, 
                         f"‚ö†Ô∏è–í—ã—à–ª–æ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –°–∫–æ—Ä–µ–µ –æ–±–Ω–æ–≤–∏ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá\"{UPDATE_BTN}\"üëá",
                         reply_markup=keyboard,
        )

def cmd_update(message):
    start2(message_start)

def cmd_empty(message):
    """
    Implementation of no keyword
    """
    if database.is_teacher(message.chat.id):
        ids = database.get_user_list()
        send_all(ids, message.text)


CMD_MAP = {
    HOMEWORK_BTN: [cmd_list_events, True],
    CALENDAR_BTN: [cmd_list_events, True],
    UPDATE_BTN: [cmd_update, True],
    ADD_EVENT_BTN: [cmd_add_event, False],
    NOTICES_BTN: [cmd_list_notices, False],
    ADD_NOTICE_BTN: [cmd_add_notice, False],
    HELP_BTN: [cmd_help, False],
    ADD_UPDATE_BTN: [cmd_add_update, False],
}


@bot.message_handler(content_types=["text"])
def text_handler(message):
    log.bot_message(message)

    func, teacher_check = None, None

    cmdmap = CMD_MAP.get(message.text)
    if cmdmap:
        func, teacher_check = cmdmap
    else:
        func, teacher_check = [cmd_empty, False]

    if teacher_check or database.is_teacher(message.chat.id):
        func(message)


def changing_our_calendar1(message):
    global daystring
    daystring = message.text
    send = bot.send_message(
        message.chat.id,
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    bot.register_next_step_handler(send, changing_our_calendar2)


def changing_our_calendar2(message):
    try:
        global daystring
        day, month, year = [int(x) for x in daystring.split(".")]
        daydate = datetime.datetime(year, month, day)
        nowdate = datetime.datetime.now()

        startmenu = types.ReplyKeyboardMarkup(True, False)
        startmenu.row(CALENDAR_BTN, HOMEWORK_BTN)
        startmenu.row(ADD_EVENT_BTN)
        startmenu.row(HELP_BTN)

        if daydate >= nowdate:
            database.add_event(message.text, daydate.timestamp())

            bot.send_message(
                message.chat.id, "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω", reply_markup=startmenu
            )

            ids = database.get_user_list()
            daystr = daydate.strftime("%d.%m")
            send_all(ids, f"{daystr} - {message.text}")
        else:
            bot.send_message(
                message.chat.id,
                "–î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è. –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω",
                reply_markup=startmenu,
            )
    except Exception as e:
        log.error(log.BOT, e)
        startmenu = types.ReplyKeyboardMarkup(True, False)
        startmenu.row(CALENDAR_BTN, HOMEWORK_BTN)
        startmenu.row(ADD_EVENT_BTN)
        startmenu.row(HELP_BTN)

        bot.send_message(
            message.chat.id,
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ñ–æ—Ä–º–∞ :(\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=startmenu,
        )


def reminder_1(message):
    global information
    information = message.text

    ts = datetime.datetime.now()
    keyboard = types.ReplyKeyboardMarkup(True, False)
    for _ in range(15):
        keyboard.row(ts.strftime("%d.%m.%Y"))
        ts += datetime.timedelta(days=1)

    send = bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=keyboard
    )
    bot.register_next_step_handler(send, reminder_2)


def reminder_2(message):
    global date_to_remind
    date_to_remind = message.text

    keyboard = types.ReplyKeyboardMarkup(True, False)

    for v in range(24):
        keyboard.row(f"{v:02d}:00", f"{v:02d}:30")

    send = bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=keyboard
    )

    bot.register_next_step_handler(send, reminder_3)


def reminder_3(message):
    global for_module_threading
    time_to_remind = message.text
    try:
        day, month, year = date_to_remind.split(".")
        hours, minutes = time_to_remind.split(":")

        moment = datetime.datetime(
            int(year), int(month), int(day), int(hours), int(minutes)
        )

        database.add_notice(information, moment.timestamp())

        startmenu = types.ReplyKeyboardMarkup(True, False)
        startmenu.row(CALENDAR_BTN, HOMEWORK_BTN)
        startmenu.row(ADD_EVENT_BTN)
        startmenu.row(HELP_BTN)

        bot.send_message(
            ID_OF_THE_TEACHER,
            f"–í—Å—ë! –Ø –ø–æ—Å—Ç–∞–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {moment}",
            reply_markup=startmenu,
        )

    except Exception as e:
        log.error(log.BOT, e)
        startmenu = types.ReplyKeyboardMarkup(True, False)
        startmenu.row(CALENDAR_BTN, HOMEWORK_BTN)
        startmenu.row(ADD_EVENT_BTN)
        startmenu.row(HELP_BTN)

        bot.send_message(
            message.chat.id,
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ñ–æ—Ä–º–∞ :(\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=startmenu,
        )


# th = Thread(target=notice_update_loop)
# th.start()

log.info(log.BOT, "Starting the bot")
bot.infinity_polling()
